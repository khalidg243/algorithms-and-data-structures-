#include <stdio.h>
#include <stdlib.h>

struct n
{
    int data;
    struct n *next;
};

struct n *head = NULL;

struct x
{
    int data2;
    struct x *after;
};

struct x *head2 = NULL;

int counter()
{
    int cntr = 0;
    struct n *temp = head;
    if (temp == NULL)
        return 0;
    do
    {
        cntr++;
        temp = temp->next;
    } while (temp != head);
    return cntr;
}

int counter2()
{
    int cntr = 0;
    struct x *temp = head2;
    if (temp == NULL)
        return 0;
    do
    {
        cntr++;
        temp = temp->after;
    } while (temp != head2);
    return cntr;
}

void displaylist()
{
    struct n *temp = head;
    int cntr = 0;
    if (temp == NULL)
        return;
    do
    {
        cntr++;
        printf("Node %d :%d\n", cntr, temp->data);
        temp = temp->next;
    } while (temp != head);
    return;
}

void displaylist2()
{
    struct x *temp = head2;
    int cntr = 0;
    if (temp == NULL)
        return;
    do
    {
        cntr++;
        printf("Node %d :%d\n", cntr, temp->data2);
        temp = temp->after;
    } while (temp != head2);
    return;
}

void InserttoEnd(int data)
{
    struct n *n = (struct n *)malloc(sizeof(struct n));
    n->data = data;
    n->next = n;
    if (head == NULL)
    { // first node in the list
        head = n;
        return;
    }
    struct n *temp = head;
    while (temp->next != head)
    {
        temp = temp->next;
    }
    n->next = temp->next; // head;
    temp->next = n;
    return;
}

void InserttoEnd2(int data)
{
    struct x *x = (struct x *)malloc(sizeof(struct x));
    x->data2 = data;
    x->after = x;
    if (head2 == NULL)
    { // first node in the list
        head2 = x;
        return;
    }
    struct x *temp = head2;
    while (temp->after != head2)
    {
        temp = temp->after;
    }
    x->after = temp->after; // head;
    temp->after = x;
    return;
}

void InserttoBeginning(int data)
{
    struct n *n = (struct n *)malloc(sizeof(struct n));
    n->data = data;
    n->next = n;
    if (head == NULL)
    { // first node in the list
        head = n;
        return;
    }
    struct n *temp = head;
    while (temp->next != head) // to find the last node
    {
        temp = temp->next;
    }
    temp->next = n;
    n->next = head;
    head = n;
    return;
}

void InserttoBeginning2(int data)
{
    struct x *x = (struct x *)malloc(sizeof(struct x));
    x->data2 = data;
    x->after = x;
    if (head2 == NULL)
    { // first node in the list
        head2 = x;
        return;
    }
    struct x *temp = head2;
    while (temp->after != head2) // to find the last node
    {
        temp = temp->after;
    }
    temp->after = x;
    x->after = head2;
    head2 = x;
    return;
}

void deleteFirst()
{
    if (head == NULL) // list is empty.
    {
        return;
    }
    if (head->next == head)
    { // if there exists only one item
        free(head);
        head = NULL;
        return;
    }
    struct n *temp = head;
    while (temp->next != head)
    { // to find the last node
        temp = temp->next;
    }

    temp->next = head->next;
    temp = head;
    head = head->next;
    free(temp);
}
void deleteFirst2()
{
    if (head2 == NULL) // list is empty.
    {
        return;
    }
    if (head2->after == head2)
    { // if there exists only one item
        free(head2);
        head2 = NULL;
        return;
    }
    struct x *temp = head2;
    while (temp->after != head2)
    { // to find the last node
        temp = temp->after;
    }

    temp->after = head2->after;
    temp = head2;
    head2 = head2->after;
    free(temp);
}
void deleteLast()
{
    if (head == NULL) // list is empty.
    {
        return;
    }
    if (head->next == head)
    { // if there exists only one item
        free(head);
        head = NULL;
        return;
    }
    struct n *temp = head;
    struct n *b4temp = NULL;
    while (temp->next != head)
    { // to find the last node
        b4temp = temp;
        temp = temp->next;
    }

    b4temp->next = temp->next; // head
    free(temp);
}

void deleteLast2()
{
    if (head2 == NULL) // list is empty.
    {
        return;
    }
    if (head2->after == head2)
    { // if there exists only one item
        free(head2);
        head2 = NULL;
        return;
    }
    struct x *temp = head2;
    struct x *b4temp = NULL;
    while (temp->after != head2)
    { // to find the last node
        b4temp = temp;
        temp = temp->after;
    }

    b4temp->after = temp->after; // head
    free(temp);
}

void copylist()
{
    struct x *temp = head2;
    int cntr = 0;
    if (temp == NULL)
        return;
    do
    {
        cntr++;
        InserttoEnd(temp->data2);
        temp = temp->after;
    } while (temp != head2);
    return;
}

void mergelists()
{
   
}
void main()
{
    InserttoEnd(6);
    InserttoEnd(7);
    InserttoEnd(8);
    InserttoEnd(9);
    InserttoBeginning(5);
    InserttoBeginning(4);
    InserttoBeginning(3);
    InserttoBeginning(2);
    InserttoBeginning(1);
    deleteFirst();
    deleteLast();
    displaylist();
    printf("\nsecond list: \n");
    InserttoEnd2(16);
    InserttoEnd2(17);
    InserttoEnd2(18);
    InserttoEnd2(19);
    InserttoBeginning2(15);
    InserttoBeginning2(14);
    InserttoBeginning2(13);
    InserttoBeginning2(12);
    InserttoBeginning2(11);
    deleteFirst2();
    deleteLast2();
    displaylist2();
    copylist();
    printf("\n merged list: \n");
    displaylist();
   

    return;
}